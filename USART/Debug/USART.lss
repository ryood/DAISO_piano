
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001cd  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013f  00000000  00000000  000003d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010d  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000176  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c5  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e0       	ldi	r30, 0x08	; 8
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 32       	cpi	r26, 0x26	; 38
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	26 d0       	rcall	.+76     	; 0xa4 <main>
  58:	55 c0       	rjmp	.+170    	; 0x104 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <USART_Tx>:
const char init_msg[] = "\n\r Pat1:1 Pat2:2 Pat3:3 Enter Pat# : ";

void USART_Tx(char tx_data)
{
	// 送信バッファが空になるのを待つ
	while (!(UCSR0A & (1 << UDRE0)))
  5c:	e0 ec       	ldi	r30, 0xC0	; 192
  5e:	f0 e0       	ldi	r31, 0x00	; 0
  60:	90 81       	ld	r25, Z
  62:	95 ff       	sbrs	r25, 5
  64:	fd cf       	rjmp	.-6      	; 0x60 <USART_Tx+0x4>
	;
	UDR0 = tx_data;
  66:	80 93 c6 00 	sts	0x00C6, r24
  6a:	08 95       	ret

0000006c <USART_Rx>:
}

unsigned char USART_Rx()
{
	// 受信バッファにデータが入るのを待つ
	while(!(UCSR0A & (1 << RXC0)))
  6c:	e0 ec       	ldi	r30, 0xC0	; 192
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	88 23       	and	r24, r24
  74:	ec f7       	brge	.-6      	; 0x70 <USART_Rx+0x4>
	;
	return UDR0;
  76:	80 91 c6 00 	lds	r24, 0x00C6
}
  7a:	08 95       	ret

0000007c <USART_write>:

void USART_write(const char *msg_string)
{
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	ec 01       	movw	r28, r24
	unsigned char i = 0;
	while (msg_string[i] != '\0') {
  84:	88 81       	ld	r24, Y
  86:	88 23       	and	r24, r24
  88:	49 f0       	breq	.+18     	; 0x9c <USART_write+0x20>
	return UDR0;
}

void USART_write(const char *msg_string)
{
	unsigned char i = 0;
  8a:	10 e0       	ldi	r17, 0x00	; 0
	while (msg_string[i] != '\0') {
		USART_Tx(msg_string[i]);
  8c:	e7 df       	rcall	.-50     	; 0x5c <USART_Tx>
		i++;
  8e:	1f 5f       	subi	r17, 0xFF	; 255
}

void USART_write(const char *msg_string)
{
	unsigned char i = 0;
	while (msg_string[i] != '\0') {
  90:	fe 01       	movw	r30, r28
  92:	e1 0f       	add	r30, r17
  94:	f1 1d       	adc	r31, r1
  96:	80 81       	ld	r24, Z
  98:	81 11       	cpse	r24, r1
  9a:	f8 cf       	rjmp	.-16     	; 0x8c <USART_write+0x10>
		USART_Tx(msg_string[i]);
		i++;
	}
}
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	1f 91       	pop	r17
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
	unsigned char command;
	
	// PORT init
	PORTB = 0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0xFF;
  a8:	84 b9       	out	0x04, r24	; 4
	
	// USART init
	UCSR0B = 0x00;	// Disable while setting baud rate
  aa:	e1 ec       	ldi	r30, 0xC1	; 193
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	// UCSR0A = (0 << U2X0) | (0 << MPCM0);	// 2倍速OFF マルチプロセッサモードOFF
	UCSR0A = 0x00;
  b0:	10 92 c0 00 	sts	0x00C0, r1
	// UCSR0C = (0 << UCSZ02) | (1 << UCSZ01) | (1 << UCSZ00);	// 非同期モード 8ビットデータ パリティなし
	UCSR0C = 0x06;
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0  = 51;	// 9600bps@8MHz
	UBRR0 = 51;
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 c5 00 	sts	0x00C5, r25
  c2:	80 93 c4 00 	sts	0x00C4, r24
	// UCSR0B = (1 << RXEN0) | (1 << RXEN0);
	UCSR0B = 0x18;
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
			USART_Tx(command);
			PORTB = 0xF0;
			break;
			case '2':
			USART_Tx(command);
			PORTB = 0xCC;
  ca:	0c ec       	ldi	r16, 0xCC	; 204
			break;
			case '3':
			USART_Tx(command);
			PORTB = 0x55;
  cc:	15 e5       	ldi	r17, 0x55	; 85
			break;
			default:
			USART_Tx('E');
			PORTB = 0xFF;
  ce:	df ef       	ldi	r29, 0xFF	; 255
		USART_write(init_msg);
		command = USART_Rx();
		switch(command) {
			case '1':
			USART_Tx(command);
			PORTB = 0xF0;
  d0:	c0 ef       	ldi	r28, 0xF0	; 240
	// UCSR0B = (1 << RXEN0) | (1 << RXEN0);
	UCSR0B = 0x18;
	
	while(1)
	{
		USART_write(init_msg);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	d2 df       	rcall	.-92     	; 0x7c <USART_write>
		command = USART_Rx();
  d8:	c9 df       	rcall	.-110    	; 0x6c <USART_Rx>
		switch(command) {
  da:	82 33       	cpi	r24, 0x32	; 50
  dc:	39 f0       	breq	.+14     	; 0xec <main+0x48>
  de:	83 33       	cpi	r24, 0x33	; 51
  e0:	49 f0       	breq	.+18     	; 0xf4 <main+0x50>
  e2:	81 33       	cpi	r24, 0x31	; 49
  e4:	59 f4       	brne	.+22     	; 0xfc <main+0x58>
			case '1':
			USART_Tx(command);
  e6:	ba df       	rcall	.-140    	; 0x5c <USART_Tx>
			PORTB = 0xF0;
  e8:	c5 b9       	out	0x05, r28	; 5
			break;
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x2e>
			case '2':
			USART_Tx(command);
  ec:	82 e3       	ldi	r24, 0x32	; 50
  ee:	b6 df       	rcall	.-148    	; 0x5c <USART_Tx>
			PORTB = 0xCC;
  f0:	05 b9       	out	0x05, r16	; 5
			break;
  f2:	ef cf       	rjmp	.-34     	; 0xd2 <main+0x2e>
			case '3':
			USART_Tx(command);
  f4:	83 e3       	ldi	r24, 0x33	; 51
  f6:	b2 df       	rcall	.-156    	; 0x5c <USART_Tx>
			PORTB = 0x55;
  f8:	15 b9       	out	0x05, r17	; 5
			break;
  fa:	eb cf       	rjmp	.-42     	; 0xd2 <main+0x2e>
			default:
			USART_Tx('E');
  fc:	85 e4       	ldi	r24, 0x45	; 69
  fe:	ae df       	rcall	.-164    	; 0x5c <USART_Tx>
			PORTB = 0xFF;
 100:	d5 b9       	out	0x05, r29	; 5
 102:	e7 cf       	rjmp	.-50     	; 0xd2 <main+0x2e>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
