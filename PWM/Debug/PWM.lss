
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001ea  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000221  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015e  00000000  00000000  0000047b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000010c  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b1  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015c  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	39 c0       	rjmp	.+114    	; 0x74 <__ctors_end>
   2:	48 c0       	rjmp	.+144    	; 0x94 <__bad_interrupt>
   4:	47 c0       	rjmp	.+142    	; 0x94 <__bad_interrupt>
   6:	46 c0       	rjmp	.+140    	; 0x94 <__bad_interrupt>
   8:	45 c0       	rjmp	.+138    	; 0x94 <__bad_interrupt>
   a:	44 c0       	rjmp	.+136    	; 0x94 <__bad_interrupt>
   c:	43 c0       	rjmp	.+134    	; 0x94 <__bad_interrupt>
   e:	42 c0       	rjmp	.+132    	; 0x94 <__bad_interrupt>
  10:	41 c0       	rjmp	.+130    	; 0x94 <__bad_interrupt>
  12:	40 c0       	rjmp	.+128    	; 0x94 <__bad_interrupt>
  14:	3f c0       	rjmp	.+126    	; 0x94 <__bad_interrupt>
  16:	59 c0       	rjmp	.+178    	; 0xca <__vector_11>
  18:	3d c0       	rjmp	.+122    	; 0x94 <__bad_interrupt>
  1a:	3c c0       	rjmp	.+120    	; 0x94 <__bad_interrupt>
  1c:	3b c0       	rjmp	.+118    	; 0x94 <__bad_interrupt>
  1e:	3a c0       	rjmp	.+116    	; 0x94 <__bad_interrupt>
  20:	39 c0       	rjmp	.+114    	; 0x94 <__bad_interrupt>
  22:	38 c0       	rjmp	.+112    	; 0x94 <__bad_interrupt>
  24:	37 c0       	rjmp	.+110    	; 0x94 <__bad_interrupt>
  26:	36 c0       	rjmp	.+108    	; 0x94 <__bad_interrupt>
  28:	35 c0       	rjmp	.+106    	; 0x94 <__bad_interrupt>
  2a:	34 c0       	rjmp	.+104    	; 0x94 <__bad_interrupt>
  2c:	33 c0       	rjmp	.+102    	; 0x94 <__bad_interrupt>
  2e:	32 c0       	rjmp	.+100    	; 0x94 <__bad_interrupt>
  30:	31 c0       	rjmp	.+98     	; 0x94 <__bad_interrupt>
  32:	30 c0       	rjmp	.+96     	; 0x94 <__bad_interrupt>

00000034 <__trampolines_end>:
  34:	20 1c       	adc	r2, r0
  36:	19 16       	cp	r1, r25
  38:	13 10       	cpse	r1, r3
  3a:	0e 0b       	sbc	r16, r30
  3c:	09 07       	cpc	r16, r25
  3e:	05 03       	mulsu	r16, r21
  40:	02 01       	movw	r0, r4
  42:	00 00       	nop
  44:	00 00       	nop
  46:	00 01       	movw	r0, r0
  48:	02 03       	mulsu	r16, r18
  4a:	05 07       	cpc	r16, r21
  4c:	09 0b       	sbc	r16, r25
  4e:	0e 10       	cpse	r0, r14
  50:	13 16       	cp	r1, r19
  52:	19 1c       	adc	r1, r9
  54:	20 23       	and	r18, r16
  56:	26 29       	or	r18, r6
  58:	2c 2f       	mov	r18, r28
  5a:	31 34       	cpi	r19, 0x41	; 65
  5c:	36 38       	cpi	r19, 0x86	; 134
  5e:	3a 3c       	cpi	r19, 0xCA	; 202
  60:	3d 3e       	cpi	r19, 0xED	; 237
  62:	3f 3f       	cpi	r19, 0xFF	; 255
  64:	40 3f       	cpi	r20, 0xF0	; 240
  66:	3f 3e       	cpi	r19, 0xEF	; 239
  68:	3d 3c       	cpi	r19, 0xCD	; 205
  6a:	3a 38       	cpi	r19, 0x8A	; 138
  6c:	36 34       	cpi	r19, 0x46	; 70
  6e:	31 2f       	mov	r19, r17
  70:	2c 29       	or	r18, r12
  72:	26 23       	and	r18, r22

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a4 30       	cpi	r26, 0x04	; 4
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	42 d0       	rcall	.+132    	; 0x116 <main>
  92:	6f c0       	rjmp	.+222    	; 0x172 <_exit>

00000094 <__bad_interrupt>:
  94:	b5 cf       	rjmp	.-150    	; 0x0 <__vectors>

00000096 <generateSawWave>:
//
uint8_t generateSawWave()
{
	uint8_t index;
	
	phaseAccumlator += tuningWord;
  96:	80 91 00 01 	lds	r24, 0x0100
  9a:	90 91 01 01 	lds	r25, 0x0101
  9e:	20 91 02 01 	lds	r18, 0x0102
  a2:	30 91 03 01 	lds	r19, 0x0103
  a6:	82 0f       	add	r24, r18
  a8:	93 1f       	adc	r25, r19
  aa:	90 93 01 01 	sts	0x0101, r25
  ae:	80 93 00 01 	sts	0x0100, r24
	
	// 右へシフト: 16bit -> 6bit(64個)
	index = phaseAccumlator >> 10;
  b2:	e0 91 00 01 	lds	r30, 0x0100
  b6:	f0 91 01 01 	lds	r31, 0x0101
  ba:	ef 2f       	mov	r30, r31
  bc:	ff 27       	eor	r31, r31
  be:	e6 95       	lsr	r30
  c0:	e6 95       	lsr	r30
	return pgm_read_byte(&sineTable[index]);
  c2:	ec 5c       	subi	r30, 0xCC	; 204
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	84 91       	lpm	r24, Z
}
  c8:	08 95       	ret

000000ca <__vector_11>:
// Timer1割り込みハンドラ
//
// ----------------------------------------------------------------------------
//
ISR(TIMER1_COMPA_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	uint8_t v;	// PWM出力値
	
	// Debug用: PD6
	PORTD |= (1 << PORTD6);
  ec:	5e 9a       	sbi	0x0b, 6	; 11
	
	v = generateSawWave();
  ee:	d3 df       	rcall	.-90     	; 0x96 <generateSawWave>
// parameter: value: 設定するDuty(0 .. OCR0A)
//
void setPWMDuty(uint8_t value)
{
	// PWMのデューティー比を設定
	OCR0B = value;
  f0:	88 bd       	out	0x28, r24	; 40
	
	v = generateSawWave();
	setPWMDuty(v);
	
	// Debug用: PD6
	PORTD &= ~(1 << PORTD6);
  f2:	5e 98       	cbi	0x0b, 6	; 11
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:
{
	//-------------------------------------------------------------------------
	// PORT設定
	//-------------------------------------------------------------------------
	// DDRD = 0;
	DDRD |= (1 << DDD5);    // PD5(OC0B): PWM out
 116:	55 9a       	sbi	0x0a, 5	; 10
	// Debug用
	//
	DDRD |= (1 << DDB6);    // PD6: output
 118:	56 9a       	sbi	0x0a, 6	; 10
	//-------------------------------------------------------------------------
	// PWM設定
	//-------------------------------------------------------------------------
	// 波形生成モード: WGM0: 1:1:1
	// 高速PWM(モード7)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 11a:	84 b5       	in	r24, 0x24	; 36
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);
 120:	85 b5       	in	r24, 0x25	; 37
 122:	88 60       	ori	r24, 0x08	; 8
 124:	85 bd       	out	0x25, r24	; 37
	//-------------------------------------------------------------------------
	// コンペア・アウトプットB: COM0B: 1:0
	// コンペア・マッチでOC0Bクリア、TOPでOC0Bセット
	TCCR0A |= (1 << COM0B1) | (0 << COM0B0);
 126:	84 b5       	in	r24, 0x24	; 36
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	84 bd       	out	0x24, r24	; 36
	//-------------------------------------------------------------------------
	// クロック設定: CS0: 0:0:1
	// 分周なし
	TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 12c:	85 b5       	in	r24, 0x25	; 37
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	85 bd       	out	0x25, r24	; 37
	// TCCR0A = 0b00100011;
	// TCCR0B = 0B00001001;
	
	//-------------------------------------------------------------------------
	// 分解能 6bit(0 .. 63)
	OCR0A = 64;
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	87 bd       	out	0x27, r24	; 39
	//-------------------------------------------------------------------------
	// Timer1設定
	//-------------------------------------------------------------------------
	// 波形生成モード: WGM0: 1:1:1:1
	// 高速PWM(モード15)
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
 140:	a0 e8       	ldi	r26, 0x80	; 128
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	8c 91       	ld	r24, X
 146:	83 60       	ori	r24, 0x03	; 3
 148:	8c 93       	st	X, r24
	//-------------------------------------------------------------------------
	// クロック設定: CS0: 0:0:1
	// 分周なし
	TCCR1B |= (1 << CS11);
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	//-------------------------------------------------------------------------
	// Compare 1A match interrupt enable
	TIMSK1 = (1 << OCIE1A);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 6f 00 	sts	0x006F, r24
	//-------------------------------------------------------------------------
	// Compare resister 1A
	// サンプリングレートの設定
	// (F_CPU / prescaler) / SAMPLE_RATE
	OCR1A = (F_CPU / 8) / SAMPLE_CLOCK;
 156:	8e e3       	ldi	r24, 0x3E	; 62
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 89 00 	sts	0x0089, r25
 15e:	80 93 88 00 	sts	0x0088, r24
// setDDSParameter()
// parameter: frequency: 生成する周波数
//
void setDDSParameter(float frequency)
{
	tuningWord = (uint16_t)(frequency * POW_2_16 / SAMPLE_CLOCK);
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	97 e0       	ldi	r25, 0x07	; 7
 166:	90 93 03 01 	sts	0x0103, r25
 16a:	80 93 02 01 	sts	0x0102, r24
	// (F_CPU / prescaler) / SAMPLE_RATE
	OCR1A = (F_CPU / 8) / SAMPLE_CLOCK;
	
	setDDSParameter(440.0f);	// 440Hz
	
	sei();
 16e:	78 94       	sei
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x5a>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
